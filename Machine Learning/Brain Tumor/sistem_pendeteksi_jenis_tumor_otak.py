# -*- coding: utf-8 -*-
"""Sistem Pendeteksi Jenis Tumor Otak.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qgaB4PKTIBSvt7O517S9Eu3duv0JEKFB

# **SISTEM PENDETEKSI JENIS TUMOR OTAK MEMANFAATKAN MACHINE LEARNING DENGAN ALGORITMA *CONVULUTIONAL NEURAL NETWORK (CNN)***

**Dataset:** https://www.kaggle.com/datasets/denizkavi1/brain-tumor
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
from google.colab import files
import os
import zipfile
import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

!pip install split-folders
import splitfolders

drive.mount('/content/drive')

local_zip = '/content/drive/MyDrive/Dataset/braintumor.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/braintumor1')
zip_ref.close()

from google.colab import drive
drive.mount('/content/drive')

"""**CATATAN**

jika koneksi ke drive masih terhubung, namun koneksi sesama blok program terputus, maka jangan jalankan dari atas. Cukup jalankan blok program peng-*import*-an dan blok program ini agar tidak membuat file ektrak baru.
"""

base_dir = '/content/braintumor1'
splitfolders.ratio(base_dir, output='/content/braintumor1', seed=1337,ratio=(.75,.25))
train_dir = os.path.join('/content/braintumor1', 'train')
validation_dir = os.path.join('/content/braintumor1','val')

train_dir = '/content/braintumor1/train'
validation_dir = '/content/braintumor1/val'

os.listdir('/content/braintumor1/train')

os.listdir('/content/braintumor1/val')

train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

test_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

train_generator = train_datagen.flow_from_directory(
            train_dir,
            target_size=(150, 150),
            batch_size=4,
            class_mode='categorical')

validation_generator = test_datagen.flow_from_directory(
            validation_dir,
            target_size=(150, 150),
            batch_size=4,
            class_mode='categorical')

model = tf.keras.models.Sequential([
        tf.keras.layers.Conv2D(filters=64,
                              kernel_size=3,
                              activation="relu",
                              input_shape=(150, 150, 3)),
        tf.keras.layers.Conv2D(32, 3, activation="relu"),
        tf.keras.layers.MaxPool2D(pool_size=2,
                                  padding="valid"),
        tf.keras.layers.Conv2D(32, 3, activation="relu"),
        tf.keras.layers.Conv2D(32, 3, activation="relu"),
        tf.keras.layers.MaxPool2D(2),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(256, activation="relu"),
        tf.keras.layers.Dense(128, activation="relu"),
        tf.keras.layers.Dense(3, activation='softmax')
])

model.summary()

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

h= model.fit( train_generator,
              epochs=25,
              steps_per_epoch=len(train_generator),
              validation_data=validation_generator )

model.evaluate(validation_generator)

plt.plot(h.history['accuracy'])
plt.title('Model Accuracy Plot')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train'], loc='lower right')
plt.show()

plt.plot(h.history['loss'])
plt.title('Model Loss Plot')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train'], loc='upper right')
plt.show()

uploaded = files.upload()

for fn in uploaded.keys():
      path = fn
      img = image.load_img(path, target_size=(150,150))

      imgplot = plt.imshow(img)
      x = image.img_to_array(img)
      x = np.expand_dims(x, axis=0)
      images = np.vstack([x])

      classes = model.predict(images, batch_size=10)
      print(fn)
      if classes[0,0]!=0:
       print('\n\n\t\t SISTEM MENDETEKSI TERDAPAT TUMOR OTAK JENIS MENINGIOMA DALAM HASIL MRI')
      elif classes[0,1]!=0:
       print('\n\n\t\t SISTEM MENDETEKSI TERDAPAT TUMOR OTAK JENIS GLIOMA DALAM HASIL MRI')
      elif classes[0,2]!=0:
        print('\n\n\t\t SISTEM MENDETEKSI TERDAPAT TUMOR OTAK JENIS PITUITARY DALAM HASIL MRI')